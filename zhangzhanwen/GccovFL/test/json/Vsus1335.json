Abstractâ€”Software fault localization, which is an important software quality assurance technology, provides the location of the faults in software to improve the efficiency of debugging and repairing. In previous research, software fault localization techniques, such as spectrum-based, mutation-based, and program slicing, have been widely used and achieved good results. However, many statements could have same suspicious values by using these techniques, which will consume large amount of manual effort to confirm and affect the accuracy of fault localization. For example, using Ochiai or DStar to locate 395 faulty versions of 6 projects in Defects4J, nearly 70% of the faulty versions have more than one suspicious statement are ranked as top tied 1. To address the above problem, this paper proposes a complexity-based fault localization (CBFL) technique to further improve the accuracy of fault localization. Firstly, a set of metrics for measuring the complexity of statements is proposed, and the metrics of each statement in projects are extracted to construct a classification model. Then, the classification model is used to predict the faulty probability of the statements which are ranked as top tied 1 by SBFL, MBFL or other techniques, and these statements are reranked according to the estimated faulty probability to improve the accuracy of fault localization. This paper implements a fault localization tool CDStar based on the CBFL, and conducts experiments on the Defects4J dataset. Comparing with the DStar, the results show that CBFL outperforms DStar in terms of Einspect@1 and EXAM.