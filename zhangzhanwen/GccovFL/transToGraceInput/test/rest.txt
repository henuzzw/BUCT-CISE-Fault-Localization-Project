['readFile.py', 'pkl', '../result/2825.pkl']
{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825', 'id': '2825', 'fileList': [{'id': 0, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271150_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [9, 13, 17], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    {', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '        if ((x1-x)*(x1-x)+(y1-y)*(y1-y)==r*r)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '        {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '            printf ("Point is on the Circle");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '        }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        else if ((x1-x)*(x1-x)+(y1-y)*(y1-y)>r*r)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '        {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '            printf ("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '        }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '            printf ("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '        }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271150_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    {', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '        if ((x1-x)*(x1-x)+(y1-y)*(y1-y)==r*r)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '        {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '            printf ("Point is on the Circle");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '        }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        else if ((x1-x)*(x1-x)+(y1-y)*(y1-y)>r*r)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '        {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '            printf ("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '        }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '            printf ("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '        }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}]}, {'id': 1, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271152_buggy.c', 'result': [1, 1, 0, 1, 1, 0, 1], 'errLines': [13], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<0)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 15}, {'id': 16, 'code': '}', 'type': 'others', 'lineNum': 16}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271152_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 17, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<0)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 15}, {'id': 16, 'code': '}', 'type': 'others', 'lineNum': 16}]}, {'id': 2, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271154_buggy.c', 'result': [1, 1, 0, 0, 0, 0, 1], 'errLines': [6], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,x1,y1,r,s;//s is for power of point', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    s=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r;//computes the power of point', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(s>0)       //point is outside if s is +ive', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    if(s==0) //point is on it if s=0', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    if(s<0)          //point is inside if s is -ive', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271154_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 21, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,x1,y1,r,s;//s is for power of point', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    s=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r;//computes the power of point', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(s>0)       //point is outside if s is +ive', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    if(s==0) //point is on it if s=0', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    if(s<0)          //point is inside if s is -ive', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}]}, {'id': 3, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271163_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [16, 20, 24], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    float A=x-x1;', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    float B=y-y1;', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    float D,E;', 'type': 'LocalVariableDeclaration', 'lineNum': 9}, {'id': 10, 'code': '    D=pow(A,2);', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    E=pow(B,2);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    float F;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    F=sqrt(D+E);', 'type': 'StatementExpression', 'lineNum': 13}, {'id': 14, 'code': '    if(F>r)', 'type': 'IfStatement', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    else if(F<r)', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf ("Point is on the Circle");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    };', 'type': 'LocalVariableDeclaration', 'lineNum': 25}, {'id': 26, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 26}, {'id': 27, 'code': '}', 'type': 'others', 'lineNum': 27}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271163_buggy.c', 'id': 0, 'startLine': 4, 'endLine': 28, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    float A=x-x1;', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    float B=y-y1;', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    float D,E;', 'type': 'LocalVariableDeclaration', 'lineNum': 9}, {'id': 10, 'code': '    D=pow(A,2);', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    E=pow(B,2);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    float F;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    F=sqrt(D+E);', 'type': 'StatementExpression', 'lineNum': 13}, {'id': 14, 'code': '    if(F>r)', 'type': 'IfStatement', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    else if(F<r)', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf ("Point is on the Circle");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    };', 'type': 'LocalVariableDeclaration', 'lineNum': 25}, {'id': 26, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 26}, {'id': 27, 'code': '}', 'type': 'others', 'lineNum': 27}]}, {'id': 4, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271173_buggy.c', 'result': [0, 0, 1, 1, 1, 1, 0], 'errLines': [24], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);//input x,y,r,x1,y1', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '    float d=sqrtf((x1-x)*(x1-x)+(y1-y)*(y1-y));', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    //compute distance between point and centre of circle', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    if ((d==r)||(d<r))', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        if (d==r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '        {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '        }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        else', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '        }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is outside the Cicle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271173_buggy.c', 'id': 0, 'startLine': 4, 'endLine': 29, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);//input x,y,r,x1,y1', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '    float d=sqrtf((x1-x)*(x1-x)+(y1-y)*(y1-y));', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    //compute distance between point and centre of circle', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    if ((d==r)||(d<r))', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        if (d==r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '        {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '        }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        else', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '        }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is outside the Cicle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}]}, {'id': 5, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271188_buggy.c', 'result': [0, 0, 1, 1, 1, 1, 0], 'errLines': [17], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,l;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    l=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(l<0)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(l==0)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271188_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 21, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,l;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    l=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(l<0)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(l==0)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}]}, {'id': 6, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271191_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [8, 12, 16], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': 'int main()', 'type': 'Method', 'lineNum': 1}, {'id': 2, 'code': '{', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 3}, {'id': 4, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 4}, {'id': 5, 'code': '    float A=((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 5}, {'id': 6, 'code': '    if(A<r*r)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    if(A==r*r)', 'type': 'IfStatement', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    if(A>r*r)', 'type': 'IfStatement', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 18}, {'id': 19, 'code': '}', 'type': 'others', 'lineNum': 19}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271191_buggy.c', 'id': 0, 'startLine': 2, 'endLine': 20, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': 'int main()', 'type': 'Method', 'lineNum': 1}, {'id': 2, 'code': '{', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 3}, {'id': 4, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 4}, {'id': 5, 'code': '    float A=((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 5}, {'id': 6, 'code': '    if(A<r*r)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    if(A==r*r)', 'type': 'IfStatement', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    if(A>r*r)', 'type': 'IfStatement', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 18}, {'id': 19, 'code': '}', 'type': 'others', 'lineNum': 19}]}, {'id': 7, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271192_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [8, 12, 16], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': 'int main()', 'type': 'Method', 'lineNum': 1}, {'id': 2, 'code': '{', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': '    float a,x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 3}, {'id': 4, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 4}, {'id': 5, 'code': '    a=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r ;', 'type': 'StatementExpression', 'lineNum': 5}, {'id': 6, 'code': '    if(a==0)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    else if(a<0)', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    else', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 18}, {'id': 19, 'code': '}', 'type': 'others', 'lineNum': 19}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271192_buggy.c', 'id': 0, 'startLine': 2, 'endLine': 20, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': 'int main()', 'type': 'Method', 'lineNum': 1}, {'id': 2, 'code': '{', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': '    float a,x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 3}, {'id': 4, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 4}, {'id': 5, 'code': '    a=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r ;', 'type': 'StatementExpression', 'lineNum': 5}, {'id': 6, 'code': '    if(a==0)', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    else if(a<0)', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    else', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    }', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 18}, {'id': 19, 'code': '}', 'type': 'others', 'lineNum': 19}]}, {'id': 8, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271203_buggy.c', 'result': [1, 1, 1, 0, 0, 1, 1], 'errLines': [16], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float y;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    float r;', 'type': 'LocalVariableDeclaration', 'lineNum': 6}, {'id': 7, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 7}, {'id': 8, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 8}, {'id': 9, 'code': '    float n;', 'type': 'LocalVariableDeclaration', 'lineNum': 9}, {'id': 10, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    n=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if ( n < 0 )', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    if ( n > 0 )', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271203_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float y;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    float r;', 'type': 'LocalVariableDeclaration', 'lineNum': 6}, {'id': 7, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 7}, {'id': 8, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 8}, {'id': 9, 'code': '    float n;', 'type': 'LocalVariableDeclaration', 'lineNum': 9}, {'id': 10, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    n=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if ( n < 0 )', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    if ( n > 0 )', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}]}, {'id': 9, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271205_buggy.c', 'result': [1, 1, 1, 0, 0, 1, 1], 'errLines': [15], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f",&x);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f",&y);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    scanf("%f",&r);', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    scanf("%f",&x1);', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    scanf("%f",&y1);', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    d =sqrt(pow(x-x1, 2)+pow(y-y1, 2));', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    if (d<r)', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    if (d>r)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271205_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f",&x);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f",&y);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    scanf("%f",&r);', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    scanf("%f",&x1);', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    scanf("%f",&y1);', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    d =sqrt(pow(x-x1, 2)+pow(y-y1, 2));', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    if (d<r)', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    if (d>r)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}]}, {'id': 10, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271209_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [10, 14, 18], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    float m=(x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    float d=sqrtf(m);', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    if(d==r)', 'type': 'IfStatement', 'lineNum': 8}, {'id': 9, 'code': '    {', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '        printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    }', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    else if(d>r)', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if(d<r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271209_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    float m=(x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    float d=sqrtf(m);', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    if(d==r)', 'type': 'IfStatement', 'lineNum': 8}, {'id': 9, 'code': '    {', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '        printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    }', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    else if(d>r)', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if(d<r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}]}, {'id': 11, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271211_buggy.c', 'result': [1, 1, 0, 0, 0, 0, 1], 'errLines': [12, 16], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y;//cordinate of the center of the circle', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float r;// radius of the circle', 'type': 'others', 'lineNum': 5}, {'id': 6, 'code': '    float x1,y1;// the another cordinate provided by user', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    float a=(x1-x)*(x1-x);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    float b=(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 9}, {'id': 10, 'code': '    float c=a+b;//distance between origen and cordinates providade by user', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    float d=sqrtf(c);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if(c<r)', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if(c==r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271211_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y;//cordinate of the center of the circle', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float r;// radius of the circle', 'type': 'others', 'lineNum': 5}, {'id': 6, 'code': '    float x1,y1;// the another cordinate provided by user', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 7}, {'id': 8, 'code': '    float a=(x1-x)*(x1-x);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    float b=(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 9}, {'id': 10, 'code': '    float c=a+b;//distance between origen and cordinates providade by user', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    float d=sqrtf(c);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if(c<r)', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if(c==r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}]}, {'id': 12, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271213_buggy.c', 'result': [0, 0, 0, 1, 0, 0, 1], 'errLines': [5], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,s;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&x1,&y1,&r);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    s=sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if  (r >s )', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    }', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    else if(r == s)', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271213_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,s;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&x1,&y1,&r);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    s=sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if  (r >s )', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    }', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    else if(r == s)', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}]}, {'id': 13, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271216_buggy.c', 'result': [1, 1, 0, 1, 1, 0, 1], 'errLines': [18], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x, y, x1, y1, r,s ;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    // (x,y) are co-ordinates for center of circle .', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '    // (x1,y1) is point whose relative loacation w.r.t circle we have to see .', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '    // r is radius of circle .', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '    // s is distance of point from center of circle .', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    s = sqrtf(((x - x1)*(x - x1)) + ((y - y1)*(y - y1))) ;', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if (s>r)', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is outside the Circle.");// if radius is less than distance from center , point is outside the circle .', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if (s==r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is on the Circle");// if radius is equal to distance from center , point is on the circumference .', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    // if radius is greater than distance from center then point is inside the circle .', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271216_buggy.c', 'id': 0, 'startLine': 4, 'endLine': 30, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x, y, x1, y1, r,s ;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    // (x,y) are co-ordinates for center of circle .', 'type': 'others', 'lineNum': 6}, {'id': 7, 'code': '    // (x1,y1) is point whose relative loacation w.r.t circle we have to see .', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '    // r is radius of circle .', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '    // s is distance of point from center of circle .', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    s = sqrtf(((x - x1)*(x - x1)) + ((y - y1)*(y - y1))) ;', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    if (s>r)', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '    {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '        printf("Point is outside the Circle.");// if radius is less than distance from center , point is outside the circle .', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    else if (s==r)', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is on the Circle");// if radius is equal to distance from center , point is on the circumference .', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    // if radius is greater than distance from center then point is inside the circle .', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}]}, {'id': 14, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271217_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [12, 17, 22], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x,y,r,x1,y1,d,e;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    d = (x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    e = sqrt(d);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    (e<r)', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    else if', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    (e==r)', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else if', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    (e>r)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271217_buggy.c', 'id': 0, 'startLine': 4, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': '', 'type': 'others', 'lineNum': 2}, {'id': 3, 'code': 'int main()', 'type': 'Method', 'lineNum': 3}, {'id': 4, 'code': '{', 'type': 'others', 'lineNum': 4}, {'id': 5, 'code': '    float x,y,r,x1,y1,d,e;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    d = (x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    e = sqrt(d);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    (e<r)', 'type': 'funCall', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    }', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    else if', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    (e==r)', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else if', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    (e>r)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}]}, {'id': 15, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271220_buggy.c', 'result': [0, 0, 0, 1, 0, 0, 1], 'errLines': [5], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,x1,y1,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&x1,&y1,&r);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    if(r==sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    else', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        if(r<sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '        {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '        }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        else', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '        }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 23}, {'id': 24, 'code': '}', 'type': 'others', 'lineNum': 24}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271220_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 25, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,x1,y1,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&x1,&y1,&r);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    if(r==sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 6}, {'id': 7, 'code': '    {', 'type': 'others', 'lineNum': 7}, {'id': 8, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 8}, {'id': 9, 'code': '    }', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '    else', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    {', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '        if(r<sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 12}, {'id': 13, 'code': '        {', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '        }', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        else', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '        }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 23}, {'id': 24, 'code': '}', 'type': 'others', 'lineNum': 24}]}, {'id': 16, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271224_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [12], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 6}, {'id': 7, 'code': '    float h;', 'type': 'LocalVariableDeclaration', 'lineNum': 7}, {'id': 8, 'code': '    float g;', 'type': 'LocalVariableDeclaration', 'lineNum': 8}, {'id': 9, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    h=(x1-x)*(x1-x)+(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    g=sqrt(h);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    printf("%f demo\\n",g);', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    if(g<r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '    {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    else if(g==r)', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    else', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 25}, {'id': 26, 'code': '}', 'type': 'others', 'lineNum': 26}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271224_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 27, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 6}, {'id': 7, 'code': '    float h;', 'type': 'LocalVariableDeclaration', 'lineNum': 7}, {'id': 8, 'code': '    float g;', 'type': 'LocalVariableDeclaration', 'lineNum': 8}, {'id': 9, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    h=(x1-x)*(x1-x)+(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 10}, {'id': 11, 'code': '    g=sqrt(h);', 'type': 'StatementExpression', 'lineNum': 11}, {'id': 12, 'code': '    printf("%f demo\\n",g);', 'type': 'funCall', 'lineNum': 12}, {'id': 13, 'code': '    if(g<r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '    {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    else if(g==r)', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    else', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 25}, {'id': 26, 'code': '}', 'type': 'others', 'lineNum': 26}]}, {'id': 17, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271226_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [11, 15, 19], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float d,D;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    d=((x-x1)*(x-x1))+((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    D=sqrtf(d);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if (D<r)', 'type': 'IfStatement', 'lineNum': 9}, {'id': 10, 'code': '    {', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    }', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    if (D==r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '    {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    if (D>r)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 21}, {'id': 22, 'code': '}', 'type': 'others', 'lineNum': 22}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271226_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 23, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    float d,D;', 'type': 'LocalVariableDeclaration', 'lineNum': 5}, {'id': 6, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 6}, {'id': 7, 'code': '    d=((x-x1)*(x-x1))+((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    D=sqrtf(d);', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if (D<r)', 'type': 'IfStatement', 'lineNum': 9}, {'id': 10, 'code': '    {', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        printf("Point is inside the Circle");', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    }', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    if (D==r)', 'type': 'IfStatement', 'lineNum': 13}, {'id': 14, 'code': '    {', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        printf("Point is on the Circle");', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    }', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    if (D>r)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is outside the Circle");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 21}, {'id': 22, 'code': '}', 'type': 'others', 'lineNum': 22}]}, {'id': 18, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271228_buggy.c', 'result': [1, 1, 0, 0, 0, 0, 1], 'errLines': [7, 11, 15], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,k;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    k=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(r>0)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(r==0)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else if(r<0)', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271228_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,k;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    k=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(r>0)', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(r==0)', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else if(r<0)', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 20}, {'id': 21, 'code': '}', 'type': 'others', 'lineNum': 21}]}, {'id': 19, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271239_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [13, 17, 22], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,a,b,c;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    a=(((x1-x)*(x1-x))+((y1-y)*(y1-y)));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    b=r*r;', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    c=a-b;', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if (c<=0)', 'type': 'IfStatement', 'lineNum': 9}, {'id': 10, 'code': '    {', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        if (c==0)', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '        {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '            printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '        }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '            printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '        }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271239_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x,y,r,x1,y1,a,b,c;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    a=(((x1-x)*(x1-x))+((y1-y)*(y1-y)));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    b=r*r;', 'type': 'StatementExpression', 'lineNum': 7}, {'id': 8, 'code': '    c=a-b;', 'type': 'StatementExpression', 'lineNum': 8}, {'id': 9, 'code': '    if (c<=0)', 'type': 'IfStatement', 'lineNum': 9}, {'id': 10, 'code': '    {', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '        if (c==0)', 'type': 'IfStatement', 'lineNum': 11}, {'id': 12, 'code': '        {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '            printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '        }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '        else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '            printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '        }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 24}, {'id': 25, 'code': '}', 'type': 'others', 'lineNum': 25}]}, {'id': 20, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271241_buggy.c', 'result': [0, 0, 0, 0, 0, 0, 0], 'errLines': [9, 13, 17], 'lineId': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f", &x, &y, &r, &x1, &y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    float dsquared = ((x-x1)*(x-x1)) + ((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(dsquared < (r*r))', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(dsquared > (r*r))', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271241_buggy.c', 'id': 0, 'startLine': 3, 'endLine': 21, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 0}, {'id': 1, 'code': '', 'type': 'others', 'lineNum': 1}, {'id': 2, 'code': 'int main()', 'type': 'Method', 'lineNum': 2}, {'id': 3, 'code': '{', 'type': 'others', 'lineNum': 3}, {'id': 4, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 4}, {'id': 5, 'code': '    scanf("%f %f %f %f %f", &x, &y, &r, &x1, &y1);', 'type': 'funCall', 'lineNum': 5}, {'id': 6, 'code': '    float dsquared = ((x-x1)*(x-x1)) + ((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 6}, {'id': 7, 'code': '    if(dsquared < (r*r))', 'type': 'IfStatement', 'lineNum': 7}, {'id': 8, 'code': '    {', 'type': 'others', 'lineNum': 8}, {'id': 9, 'code': '        printf("Point is inside the circle.");', 'type': 'funCall', 'lineNum': 9}, {'id': 10, 'code': '    }', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '    else if(dsquared > (r*r))', 'type': 'funCall', 'lineNum': 11}, {'id': 12, 'code': '    {', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '        printf("Point is outside the circle.");', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    }', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    else', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 19}, {'id': 20, 'code': '}', 'type': 'others', 'lineNum': 20}]}, {'id': 21, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271150_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        if ((x1-x)*(x1-x)+(y1-y)*(y1-y)==r*r)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '        {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '            printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '        }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        else if ((x1-x)*(x1-x)+(y1-y)*(y1-y)>r*r)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '        {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '            printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '        }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        else', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '            printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '        }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271150_correct.c', 'id': 0, 'startLine': 4, 'endLine': 23, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    {', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '        if ((x1-x)*(x1-x)+(y1-y)*(y1-y)==r*r)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '        {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '            printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '        }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        else if ((x1-x)*(x1-x)+(y1-y)*(y1-y)>r*r)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '        {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '            printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '        }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        else', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '            printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '        }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}]}, {'id': 22, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271152_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<=0)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<0)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '        {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '        }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        else', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '        }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271152_correct.c', 'id': 0, 'startLine': 4, 'endLine': 24, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<=0)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        if((x1-x)*(x1-x)+(y1-y)*(y1-y)-r*r<0)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '        {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '        }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        else', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '        }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}]}, {'id': 23, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271154_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,x1,y1,r,s;//s is for power of point', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    s=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;//computes the power of point', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(s>0)       //point is outside if s is +ive', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    if(s==0) //point is on it if s=0', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    if(s<0)          //point is inside if s is -ive', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271154_correct.c', 'id': 0, 'startLine': 4, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,x1,y1,r,s;//s is for power of point', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    s=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;//computes the power of point', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(s>0)       //point is outside if s is +ive', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    if(s==0) //point is on it if s=0', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    if(s<0)          //point is inside if s is -ive', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}]}, {'id': 24, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271163_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    float A=x-x1;', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    float B=y-y1;', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    float D,E;', 'type': 'LocalVariableDeclaration', 'lineNum': 18}, {'id': 19, 'code': '    D=pow(A,2);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    E=pow(B,2);', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    float F;', 'type': 'LocalVariableDeclaration', 'lineNum': 21}, {'id': 22, 'code': '    F=sqrt(D+E);', 'type': 'StatementExpression', 'lineNum': 22}, {'id': 23, 'code': '    if(F>r)', 'type': 'IfStatement', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    else if(F<r)', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    {', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '    };', 'type': 'LocalVariableDeclaration', 'lineNum': 34}, {'id': 35, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 35}, {'id': 36, 'code': '}', 'type': 'others', 'lineNum': 36}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271163_correct.c', 'id': 0, 'startLine': 5, 'endLine': 29, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, r, x1, y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    float A=x-x1;', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    float B=y-y1;', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    float D,E;', 'type': 'LocalVariableDeclaration', 'lineNum': 18}, {'id': 19, 'code': '    D=pow(A,2);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    E=pow(B,2);', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    float F;', 'type': 'LocalVariableDeclaration', 'lineNum': 21}, {'id': 22, 'code': '    F=sqrt(D+E);', 'type': 'StatementExpression', 'lineNum': 22}, {'id': 23, 'code': '    if(F>r)', 'type': 'IfStatement', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    else if(F<r)', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    {', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '    };', 'type': 'LocalVariableDeclaration', 'lineNum': 34}, {'id': 35, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 35}, {'id': 36, 'code': '}', 'type': 'others', 'lineNum': 36}]}, {'id': 25, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271173_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);//input x,y,r,x1,y1', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    float d=sqrtf((x1-x)*(x1-x)+(y1-y)*(y1-y));', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    //compute distance between point and centre of circle', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    if ((d==r)||(d<r))', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        if (d==r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '        {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '        }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '        }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '    }', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 36}, {'id': 37, 'code': '}', 'type': 'others', 'lineNum': 37}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271173_correct.c', 'id': 0, 'startLine': 5, 'endLine': 30, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);//input x,y,r,x1,y1', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    float d=sqrtf((x1-x)*(x1-x)+(y1-y)*(y1-y));', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    //compute distance between point and centre of circle', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    if ((d==r)||(d<r))', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        if (d==r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '        {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '        }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '        }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '    }', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 36}, {'id': 37, 'code': '}', 'type': 'others', 'lineNum': 37}]}, {'id': 26, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271188_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,l;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    l=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(l<0)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else if(l==0)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if(l>0)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271188_correct.c', 'id': 0, 'startLine': 4, 'endLine': 22, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,l;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    l=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(l<0)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else if(l==0)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if(l>0)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 28}, {'id': 29, 'code': '}', 'type': 'others', 'lineNum': 29}]}, {'id': 27, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271191_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': 'int main()', 'type': 'Method', 'lineNum': 10}, {'id': 11, 'code': '{', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    float A=((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 14}, {'id': 15, 'code': '    if(A<r*r)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    if(A==r*r)', 'type': 'IfStatement', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    if(A>r*r)', 'type': 'IfStatement', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271191_correct.c', 'id': 0, 'startLine': 3, 'endLine': 21, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': 'int main()', 'type': 'Method', 'lineNum': 10}, {'id': 11, 'code': '{', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    float A=((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 14}, {'id': 15, 'code': '    if(A<r*r)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    if(A==r*r)', 'type': 'IfStatement', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    if(A>r*r)', 'type': 'IfStatement', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}]}, {'id': 28, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271192_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': 'int main()', 'type': 'Method', 'lineNum': 10}, {'id': 11, 'code': '{', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    float a,x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    a=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r ;', 'type': 'StatementExpression', 'lineNum': 14}, {'id': 15, 'code': '    if(a==0)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else if(a<0)', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271192_correct.c', 'id': 0, 'startLine': 3, 'endLine': 21, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': 'int main()', 'type': 'Method', 'lineNum': 10}, {'id': 11, 'code': '{', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': '    float a,x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 12}, {'id': 13, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 13}, {'id': 14, 'code': '    a=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r ;', 'type': 'StatementExpression', 'lineNum': 14}, {'id': 15, 'code': '    if(a==0)', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else if(a<0)', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    }', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 27}, {'id': 28, 'code': '}', 'type': 'others', 'lineNum': 28}]}, {'id': 29, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271203_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float y;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    float r;', 'type': 'LocalVariableDeclaration', 'lineNum': 15}, {'id': 16, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 17}, {'id': 18, 'code': '    float n;', 'type': 'LocalVariableDeclaration', 'lineNum': 18}, {'id': 19, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    n=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    if ( n < 0 )', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        if ( n == 0 )', 'type': 'IfStatement', 'lineNum': 27}, {'id': 28, 'code': '        {', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '        }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '        }', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '    }', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 36}, {'id': 37, 'code': '}', 'type': 'others', 'lineNum': 37}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271203_correct.c', 'id': 0, 'startLine': 4, 'endLine': 30, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float y;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    float r;', 'type': 'LocalVariableDeclaration', 'lineNum': 15}, {'id': 16, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 17}, {'id': 18, 'code': '    float n;', 'type': 'LocalVariableDeclaration', 'lineNum': 18}, {'id': 19, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    n=(x-x1)*(x-x1)+(y-y1)*(y-y1)-r*r;', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    if ( n < 0 )', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        if ( n == 0 )', 'type': 'IfStatement', 'lineNum': 27}, {'id': 28, 'code': '        {', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '        }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        else', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        {', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 33}, {'id': 34, 'code': '        }', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '    }', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 36}, {'id': 37, 'code': '}', 'type': 'others', 'lineNum': 37}]}, {'id': 30, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271205_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f",&x);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f",&y);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    scanf("%f",&r);', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    scanf("%f",&x1);', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    scanf("%f",&y1);', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    d =sqrt(pow(x-x1, 2)+pow(y-y1, 2));', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    if (d<r)', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if (d>r)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    else', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    {', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 30}, {'id': 31, 'code': '    }', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271205_correct.c', 'id': 0, 'startLine': 4, 'endLine': 27, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f",&x);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f",&y);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    scanf("%f",&r);', 'type': 'funCall', 'lineNum': 16}, {'id': 17, 'code': '    scanf("%f",&x1);', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    scanf("%f",&y1);', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    d =sqrt(pow(x-x1, 2)+pow(y-y1, 2));', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    if (d<r)', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if (d>r)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    else', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    {', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 30}, {'id': 31, 'code': '    }', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}]}, {'id': 31, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271206_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include <stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include <math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, r, x1, y1;                     // centre, radius, point', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f%f%f%f%f", &x, &y, &r, &x1, &y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    float s;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    s = sqrt((x-x1)*(x-x1) + (y-y1)*(y-y1));   // dis. of point from center', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    if (s == r)                                //  conditions for s', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        if (s > r)', 'type': 'IfStatement', 'lineNum': 25}, {'id': 26, 'code': '        {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '        }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '        else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '        {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '        }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 35}, {'id': 36, 'code': '}', 'type': 'others', 'lineNum': 36}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271206_correct.c', 'id': 0, 'startLine': 5, 'endLine': 29, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include <stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include <math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, r, x1, y1;                     // centre, radius, point', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f%f%f%f%f", &x, &y, &r, &x1, &y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    float s;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    s = sqrt((x-x1)*(x-x1) + (y-y1)*(y-y1));   // dis. of point from center', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    if (s == r)                                //  conditions for s', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    {', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        if (s > r)', 'type': 'IfStatement', 'lineNum': 25}, {'id': 26, 'code': '        {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '        }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '        else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '        {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '        }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 35}, {'id': 36, 'code': '}', 'type': 'others', 'lineNum': 36}]}, {'id': 32, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271209_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    float m=(x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    float d=sqrtf(m);', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    if(d==r)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    else if(d>r)', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else if(d<r)', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271209_correct.c', 'id': 0, 'startLine': 4, 'endLine': 23, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    float m=(x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    float d=sqrtf(m);', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    if(d==r)', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    }', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    else if(d>r)', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else if(d<r)', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}]}, {'id': 33, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271211_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y;//cordinate of the center of the circle', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    float r;// radius of the circle', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    float x1,y1;// the another cordinate provided by user', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    float a=(x1-x)*(x1-x);', 'type': 'StatementExpression', 'lineNum': 18}, {'id': 19, 'code': '    float b=(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    float c=a+b;//distance between origen and cordinates providade by user', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    float d=sqrtf(c);', 'type': 'StatementExpression', 'lineNum': 21}, {'id': 22, 'code': '    if(d<r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else if(d==r)', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    else', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 34}, {'id': 35, 'code': '}', 'type': 'others', 'lineNum': 35}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271211_correct.c', 'id': 0, 'startLine': 5, 'endLine': 28, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y;//cordinate of the center of the circle', 'type': 'others', 'lineNum': 14}, {'id': 15, 'code': '    float r;// radius of the circle', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    float x1,y1;// the another cordinate provided by user', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    float a=(x1-x)*(x1-x);', 'type': 'StatementExpression', 'lineNum': 18}, {'id': 19, 'code': '    float b=(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    float c=a+b;//distance between origen and cordinates providade by user', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    float d=sqrtf(c);', 'type': 'StatementExpression', 'lineNum': 21}, {'id': 22, 'code': '    if(d<r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else if(d==r)', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    else', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 34}, {'id': 35, 'code': '}', 'type': 'others', 'lineNum': 35}]}, {'id': 34, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271213_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1,s;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    s=sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    if  (r >s )', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else if(r == s)', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271213_correct.c', 'id': 0, 'startLine': 5, 'endLine': 24, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1,s;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    s=sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    if  (r >s )', 'type': 'IfStatement', 'lineNum': 17}, {'id': 18, 'code': '    {', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '        printf ("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    else if(r == s)', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf ("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf ("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}]}, {'id': 35, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271216_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, x1, y1, r,s ;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    // (x,y) are co-ordinates for center of circle .', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    // (x1,y1) is point whose relative loacation w.r.t circle we have to see .', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    // r is radius of circle .', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    // s is distance of point from center of circle .', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    s = sqrtf(((x - x1)*(x - x1)) + ((y - y1)*(y - y1))) ;', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    if (s>r)', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");// if radius is less than distance from center , point is outside the circle .', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else if (s==r)', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        printf("Point is on the Circle.");// if radius is equal to distance from center , point is on the circumference .', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    // if radius is greater than distance from center then point is inside the circle .', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '', 'type': 'others', 'lineNum': 36}, {'id': 37, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 37}, {'id': 38, 'code': '}', 'type': 'others', 'lineNum': 38}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271216_correct.c', 'id': 0, 'startLine': 5, 'endLine': 31, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x, y, x1, y1, r,s ;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    // (x,y) are co-ordinates for center of circle .', 'type': 'others', 'lineNum': 15}, {'id': 16, 'code': '    // (x1,y1) is point whose relative loacation w.r.t circle we have to see .', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '    // r is radius of circle .', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '    // s is distance of point from center of circle .', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    s = sqrtf(((x - x1)*(x - x1)) + ((y - y1)*(y - y1))) ;', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '    if (s>r)', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '    {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '        printf("Point is outside the Circle.");// if radius is less than distance from center , point is outside the circle .', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '    }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '    else if (s==r)', 'type': 'funCall', 'lineNum': 25}, {'id': 26, 'code': '    {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '        printf("Point is on the Circle.");// if radius is equal to distance from center , point is on the circumference .', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    // if radius is greater than distance from center then point is inside the circle .', 'type': 'others', 'lineNum': 34}, {'id': 35, 'code': '', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '', 'type': 'others', 'lineNum': 36}, {'id': 37, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 37}, {'id': 38, 'code': '}', 'type': 'others', 'lineNum': 38}]}, {'id': 36, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271217_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1,d,e;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    d = (x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    e = sqrt(d);', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    (e<r)', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else if', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    (e==r)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    else if', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    (e>r)', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '    }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271217_correct.c', 'id': 0, 'startLine': 5, 'endLine': 27, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': '', 'type': 'others', 'lineNum': 11}, {'id': 12, 'code': 'int main()', 'type': 'Method', 'lineNum': 12}, {'id': 13, 'code': '{', 'type': 'others', 'lineNum': 13}, {'id': 14, 'code': '    float x,y,r,x1,y1,d,e;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf ("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    d = (x-x1)*(x-x1)+(y-y1)*(y-y1);', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    e = sqrt(d);', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    (e<r)', 'type': 'funCall', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 21}, {'id': 22, 'code': '    }', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '    else if', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    (e==r)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    else if', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    (e>r)', 'type': 'funCall', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '    }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}]}, {'id': 37, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271220_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,x1,y1,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    if(r==sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        if(r<sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '        {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '        }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        else', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '        }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 32}, {'id': 33, 'code': '}', 'type': 'others', 'lineNum': 33}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271220_correct.c', 'id': 0, 'startLine': 4, 'endLine': 26, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,x1,y1,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    if(r==sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 15}, {'id': 16, 'code': '    {', 'type': 'others', 'lineNum': 16}, {'id': 17, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 17}, {'id': 18, 'code': '    }', 'type': 'others', 'lineNum': 18}, {'id': 19, 'code': '    else', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    {', 'type': 'others', 'lineNum': 20}, {'id': 21, 'code': '        if(r<sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)))', 'type': 'IfStatement', 'lineNum': 21}, {'id': 22, 'code': '        {', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '            printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 23}, {'id': 24, 'code': '        }', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        else', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        {', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 27}, {'id': 28, 'code': '        }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    }', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 32}, {'id': 33, 'code': '}', 'type': 'others', 'lineNum': 33}]}, {'id': 38, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271224_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 15}, {'id': 16, 'code': '    float h;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    float g;', 'type': 'LocalVariableDeclaration', 'lineNum': 17}, {'id': 18, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    h=(x1-x)*(x1-x)+(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    g=sqrt(h);', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    if(g<r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else if(g==r)', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    else', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 34}, {'id': 35, 'code': '}', 'type': 'others', 'lineNum': 35}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271224_correct.c', 'id': 0, 'startLine': 4, 'endLine': 28, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float x1;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    float y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 15}, {'id': 16, 'code': '    float h;', 'type': 'LocalVariableDeclaration', 'lineNum': 16}, {'id': 17, 'code': '    float g;', 'type': 'LocalVariableDeclaration', 'lineNum': 17}, {'id': 18, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    h=(x1-x)*(x1-x)+(y1-y)*(y1-y);', 'type': 'StatementExpression', 'lineNum': 19}, {'id': 20, 'code': '    g=sqrt(h);', 'type': 'StatementExpression', 'lineNum': 20}, {'id': 21, 'code': '', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    if(g<r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    else if(g==r)', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    else', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 34}, {'id': 35, 'code': '}', 'type': 'others', 'lineNum': 35}]}, {'id': 39, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271226_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float d,D;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    d=((x-x1)*(x-x1))+((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    D=sqrtf(d);', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if (D<r)', 'type': 'IfStatement', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    if (D==r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    if (D>r)', 'type': 'IfStatement', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271226_correct.c', 'id': 0, 'startLine': 4, 'endLine': 24, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    float d,D;', 'type': 'LocalVariableDeclaration', 'lineNum': 14}, {'id': 15, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 15}, {'id': 16, 'code': '    d=((x-x1)*(x-x1))+((y-y1)*(y-y1));', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    D=sqrtf(d);', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if (D<r)', 'type': 'IfStatement', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    }', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '    if (D==r)', 'type': 'IfStatement', 'lineNum': 22}, {'id': 23, 'code': '    {', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    }', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '    if (D>r)', 'type': 'IfStatement', 'lineNum': 26}, {'id': 27, 'code': '    {', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    }', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 30}, {'id': 31, 'code': '}', 'type': 'others', 'lineNum': 31}]}, {'id': 40, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271228_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,k;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    k=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(k>0)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else if(k==0)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if(k<0)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271228_correct.c', 'id': 0, 'startLine': 4, 'endLine': 23, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,k;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f %f %f %f %f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    k=(x-x1)*(x-x1)+(y-y1)*(y-y1)-(r*r);', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    if(k>0)', 'type': 'IfStatement', 'lineNum': 16}, {'id': 17, 'code': '    {', 'type': 'others', 'lineNum': 17}, {'id': 18, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 18}, {'id': 19, 'code': '    }', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '    else if(k==0)', 'type': 'funCall', 'lineNum': 20}, {'id': 21, 'code': '    {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '    }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '    else if(k<0)', 'type': 'funCall', 'lineNum': 24}, {'id': 25, 'code': '    {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '    }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    // Fill this area with your code.', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 29}, {'id': 30, 'code': '}', 'type': 'others', 'lineNum': 30}]}, {'id': 41, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271239_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,a,b,c;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    a=(((x1-x)*(x1-x))+((y1-y)*(y1-y)));', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    b=r*r;', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    c=a-b;', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if (c<=0)', 'type': 'IfStatement', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        if (c==0)', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '        {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '        }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        else', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '        }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '    }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271239_correct.c', 'id': 0, 'startLine': 4, 'endLine': 27, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 9, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 9}, {'id': 10, 'code': '', 'type': 'others', 'lineNum': 10}, {'id': 11, 'code': 'int main()', 'type': 'Method', 'lineNum': 11}, {'id': 12, 'code': '{', 'type': 'others', 'lineNum': 12}, {'id': 13, 'code': '    float x,y,r,x1,y1,a,b,c;', 'type': 'LocalVariableDeclaration', 'lineNum': 13}, {'id': 14, 'code': '    scanf("%f%f%f%f%f",&x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 14}, {'id': 15, 'code': '    a=(((x1-x)*(x1-x))+((y1-y)*(y1-y)));', 'type': 'StatementExpression', 'lineNum': 15}, {'id': 16, 'code': '    b=r*r;', 'type': 'StatementExpression', 'lineNum': 16}, {'id': 17, 'code': '    c=a-b;', 'type': 'StatementExpression', 'lineNum': 17}, {'id': 18, 'code': '    if (c<=0)', 'type': 'IfStatement', 'lineNum': 18}, {'id': 19, 'code': '    {', 'type': 'others', 'lineNum': 19}, {'id': 20, 'code': '        if (c==0)', 'type': 'IfStatement', 'lineNum': 20}, {'id': 21, 'code': '        {', 'type': 'others', 'lineNum': 21}, {'id': 22, 'code': '            printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 22}, {'id': 23, 'code': '        }', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '        else', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': '        {', 'type': 'others', 'lineNum': 25}, {'id': 26, 'code': '            printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 26}, {'id': 27, 'code': '        }', 'type': 'others', 'lineNum': 27}, {'id': 28, 'code': '    }', 'type': 'others', 'lineNum': 28}, {'id': 29, 'code': '    else', 'type': 'others', 'lineNum': 29}, {'id': 30, 'code': '    {', 'type': 'others', 'lineNum': 30}, {'id': 31, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 31}, {'id': 32, 'code': '    }', 'type': 'others', 'lineNum': 32}, {'id': 33, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 33}, {'id': 34, 'code': '}', 'type': 'others', 'lineNum': 34}]}, {'id': 42, 'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271241_correct.c', 'result': [1, 1, 1, 1, 1, 1, 1], 'errLines': [], 'lineId': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 22, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': 'int main()', 'type': 'Method', 'lineNum': 25}, {'id': 26, 'code': '{', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 27}, {'id': 28, 'code': '    scanf("%f%f%f%f%f", &x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    d = sqrtf(pow((x1-x), 2) + pow((y1 - y), 2));', 'type': 'StatementExpression', 'lineNum': 29}, {'id': 30, 'code': '    if(d < r)', 'type': 'IfStatement', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    else if(d == r)', 'type': 'funCall', 'lineNum': 34}, {'id': 35, 'code': '    {', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 36}, {'id': 37, 'code': '    }', 'type': 'others', 'lineNum': 37}, {'id': 38, 'code': '    else', 'type': 'others', 'lineNum': 38}, {'id': 39, 'code': '    {', 'type': 'others', 'lineNum': 39}, {'id': 40, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 40}, {'id': 41, 'code': '    }', 'type': 'others', 'lineNum': 41}, {'id': 42, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 42}, {'id': 43, 'code': '', 'type': 'others', 'lineNum': 43}, {'id': 44, 'code': '}', 'type': 'others', 'lineNum': 44}], 'maxi': [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 'funList': [{'pwd': '/home/zhangzhanwen/transtoGraceInput/ITSP-data/2825/271241_correct.c', 'id': 0, 'startLine': 5, 'endLine': 24, 'name': 'int main()'}], 'codeList': [{'id': 0, 'code': '', 'type': 'others', 'lineNum': 0}, {'id': 22, 'code': '#include<stdio.h>', 'type': 'others', 'lineNum': 22}, {'id': 23, 'code': '#include<math.h>', 'type': 'others', 'lineNum': 23}, {'id': 24, 'code': '', 'type': 'others', 'lineNum': 24}, {'id': 25, 'code': 'int main()', 'type': 'Method', 'lineNum': 25}, {'id': 26, 'code': '{', 'type': 'others', 'lineNum': 26}, {'id': 27, 'code': '    float x, y, r, x1, y1, d;', 'type': 'LocalVariableDeclaration', 'lineNum': 27}, {'id': 28, 'code': '    scanf("%f%f%f%f%f", &x,&y,&r,&x1,&y1);', 'type': 'funCall', 'lineNum': 28}, {'id': 29, 'code': '    d = sqrtf(pow((x1-x), 2) + pow((y1 - y), 2));', 'type': 'StatementExpression', 'lineNum': 29}, {'id': 30, 'code': '    if(d < r)', 'type': 'IfStatement', 'lineNum': 30}, {'id': 31, 'code': '    {', 'type': 'others', 'lineNum': 31}, {'id': 32, 'code': '        printf("Point is inside the Circle.");', 'type': 'funCall', 'lineNum': 32}, {'id': 33, 'code': '    }', 'type': 'others', 'lineNum': 33}, {'id': 34, 'code': '    else if(d == r)', 'type': 'funCall', 'lineNum': 34}, {'id': 35, 'code': '    {', 'type': 'others', 'lineNum': 35}, {'id': 36, 'code': '        printf("Point is on the Circle.");', 'type': 'funCall', 'lineNum': 36}, {'id': 37, 'code': '    }', 'type': 'others', 'lineNum': 37}, {'id': 38, 'code': '    else', 'type': 'others', 'lineNum': 38}, {'id': 39, 'code': '    {', 'type': 'others', 'lineNum': 39}, {'id': 40, 'code': '        printf("Point is outside the Circle.");', 'type': 'funCall', 'lineNum': 40}, {'id': 41, 'code': '    }', 'type': 'others', 'lineNum': 41}, {'id': 42, 'code': '    return 0;', 'type': 'ReturnStatement', 'lineNum': 42}, {'id': 43, 'code': '', 'type': 'others', 'lineNum': 43}, {'id': 44, 'code': '}', 'type': 'others', 'lineNum': 44}]}], 'inList': ['2825.1.in', '2825.2.in', '2825.3.in', '2825.4.in', '2825.5.in', '2825.6.in', '2825.7.in'], 'fileId': ['271150_buggy.c', '271152_buggy.c', '271154_buggy.c', '271163_buggy.c', '271173_buggy.c', '271188_buggy.c', '271191_buggy.c', '271192_buggy.c', '271203_buggy.c', '271205_buggy.c', '271209_buggy.c', '271211_buggy.c', '271213_buggy.c', '271216_buggy.c', '271217_buggy.c', '271220_buggy.c', '271224_buggy.c', '271226_buggy.c', '271228_buggy.c', '271239_buggy.c', '271241_buggy.c', '271150_correct.c', '271152_correct.c', '271154_correct.c', '271163_correct.c', '271173_correct.c', '271188_correct.c', '271191_correct.c', '271192_correct.c', '271203_correct.c', '271205_correct.c', '271206_correct.c', '271209_correct.c', '271211_correct.c', '271213_correct.c', '271216_correct.c', '271217_correct.c', '271220_correct.c', '271224_correct.c', '271226_correct.c', '271228_correct.c', '271239_correct.c', '271241_correct.c']}
